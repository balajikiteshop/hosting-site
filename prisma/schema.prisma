// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  password      String?  // For email/password authentication
  image         String?
  phone         String?
  address       String?
  googleId      String?  @unique
  emailVerified DateTime?
  role          String   @default("user") // user, admin
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  carts         Cart[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float // Base price for the product
  imageUrl    String?
  stock       Int      @default(0) // Default stock for products without variants
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId String?
  category   Category?        @relation(fields: [categoryId], references: [id])
  variants   ProductVariant[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@index([categoryId])
  @@map("products")
}

model ProductVariant {
  id         String   @id @default(cuid())
  sku        String   @unique // Unique identifier for this variant
  name       String // e.g., "Red - Large"
  price      Float // Final price for this variant
  stock      Int      @default(0)
  imageUrl   String? // Optional variant-specific image
  attributes Json // Store variant attributes (color, size, etc) as JSON
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  productId  String
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@index([productId])
  @@map("product_variants")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items CartItem[]

  @@index([userId])
  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartId    String
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([cartId])
  @@index([productId])
  @@index([variantId])
  @@map("cart_items")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  amount        Float // Total order amount
  currency      String      @default("INR")
  status        String      @default("pending") // pending, processing, completed, cancelled
  paymentStatus String      @default("pending") // pending, paid, failed
  paymentId     String?     @unique // Payment gateway reference
  shippingInfo  Json // Shipping details as JSON
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  items         OrderItem[]

  @@index([userId])
  @@map("orders")
}

model OrderItem {
  id        String          @id @default(cuid())
  quantity  Int
  price     Float // Final price at time of order
  orderId   String
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
  @@map("order_items")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
